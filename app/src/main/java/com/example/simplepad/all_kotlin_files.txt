===== ./FileNotesRepository.kt =====
package com.example.simplepad

import android.content.Context
import org.json.JSONObject
import java.io.File

class FileNotesRepository(private val context: Context) {

    private val notesDir: File by lazy {
        File(context.filesDir, "notes").apply { if (!exists()) mkdirs() }
    }

    fun listNotes(): List<Note> {
        val files = notesDir.listFiles { f -> f.extension == "json" } ?: emptyArray()
        val list = files.mapNotNull { f -> readFileAsNote(f) }
        return list.sortedByDescending { it.updatedAt }
    }

    fun readNote(id: String): Note? {
        val f = File(notesDir, "$id.json")
        if (!f.exists()) return null
        return readFileAsNote(f)
    }

    fun saveNote(note: Note) {
        val f = File(notesDir, "${note.id}.json")
        val obj = JSONObject().apply {
            put("id", note.id)
            put("title", note.title)
            put("content", note.content)
            put("createdAt", note.createdAt)
            put("updatedAt", note.updatedAt)
        }
        f.writeText(obj.toString())
    }

    fun deleteNote(id: String) {
        File(notesDir, "$id.json").delete()
    }

    private fun readFileAsNote(f: File): Note? = try {
        val obj = JSONObject(f.readText())
        Note(
            id = obj.optString("id", f.nameWithoutExtension),
            title = obj.optString("title", ""),
            content = obj.optString("content", ""),
            createdAt = obj.optLong("createdAt", f.lastModified()),
            updatedAt = obj.optLong("updatedAt", f.lastModified())
        )
    } catch (_: Throwable) {
        null
    }
}

===== ./MainActivity.kt =====
package com.example.simplepad

import android.content.Intent
import android.os.Bundle
import androidx.activity.ComponentActivity
import androidx.activity.compose.BackHandler
import androidx.activity.compose.setContent
import androidx.compose.foundation.clickable
import androidx.compose.foundation.layout.*
import androidx.compose.foundation.lazy.LazyColumn
import androidx.compose.foundation.lazy.items
import androidx.compose.material.icons.filled.Delete
import androidx.compose.material.icons.filled.Share
import androidx.compose.material3.*
import androidx.compose.runtime.*
import androidx.compose.ui.Alignment
import androidx.compose.ui.Modifier
import androidx.compose.ui.platform.LocalContext
import androidx.compose.ui.text.font.FontWeight
import androidx.compose.ui.text.input.ImeAction
import androidx.compose.ui.text.style.TextOverflow
import androidx.compose.ui.unit.dp
import androidx.lifecycle.ViewModelProvider
import androidx.compose.foundation.text.KeyboardOptions

class MainActivity : ComponentActivity() {

    override fun onCreate(savedInstanceState: Bundle?) {
        super.onCreate(savedInstanceState)

        val vm = ViewModelProvider(
            this,
            ViewModelProvider.AndroidViewModelFactory.getInstance(application)
        )[NotesViewModel::class.java]

        setContent {
            MaterialTheme {
                SimplePadApp(vm)
            }
        }
    }
}

private sealed interface Screen {
    data object List : Screen
    data class Edit(val noteId: String?, val isNew: Boolean) : Screen
}

@Composable
private fun SimplePadApp(vm: NotesViewModel) {
    var screen by remember { mutableStateOf<Screen>(Screen.List) }

    when (val s = screen) {
        is Screen.List -> NotesListScreen(
            vm = vm,
            onAdd = {
                val id = vm.newDraftId()
                screen = Screen.Edit(noteId = id, isNew = true)
            },
            onOpen = { noteId ->
                screen = Screen.Edit(noteId = noteId, isNew = false)
            }
        )
        is Screen.Edit -> NoteEditorScreen(
            vm = vm,
            noteId = s.noteId,
            isNew = s.isNew,
            onDone = { screen = Screen.List },
            onDeleted = { screen = Screen.List }
        )
    }
}

@OptIn(ExperimentalMaterial3Api::class)
@Composable
private fun NotesListScreen(
    vm: NotesViewModel,
    onAdd: () -> Unit,
    onOpen: (String) -> Unit
) {
    val notes by vm.notesState // SnapshotStateList<Note>
    val query by vm.queryState

    Scaffold(
        topBar = {
            TopAppBar(
                title = { Text("SimplePad", fontWeight = FontWeight.SemiBold) }
            )
        },
        floatingActionButton = {
            FloatingActionButton(onClick = onAdd) { Text("+") }
        }
    ) { padding ->
        Column(
            Modifier
                .fillMaxSize()
                .padding(padding)
                .padding(horizontal = 16.dp, vertical = 8.dp)
        ) {

            OutlinedTextField(
                value = query,
                onValueChange = { vm.setQuery(it) },
                modifier = Modifier.fillMaxWidth(),
                placeholder = { Text("Search notesâ€¦") },
                singleLine = true,
                keyboardOptions = KeyboardOptions.Default.copy(
                    imeAction = ImeAction.Search
                )
            )

            Spacer(Modifier.height(12.dp))

            val filtered = remember(notes, query) {
                if (query.isBlank()) notes
                else notes.filter {
                    it.title.contains(query, ignoreCase = true) ||
                            it.content.contains(query, ignoreCase = true)
                }
            }

            if (filtered.isEmpty()) {
                Box(Modifier.fillMaxSize(), contentAlignment = Alignment.Center) {
                    Text("No notes yet. Tap + to add one.")
                }
            } else {
                LazyColumn(
                    modifier = Modifier.fillMaxSize(),
                    verticalArrangement = Arrangement.spacedBy(10.dp),
                    contentPadding = PaddingValues(bottom = 88.dp)
                ) {
                    items(filtered, key = { it.id }) { note ->
                        NoteRow(note = note, onClick = { onOpen(note.id) })
                    }
                }
            }
        }
    }
}

@Composable
private fun NoteRow(note: Note, onClick: () -> Unit) {
    ElevatedCard(
        modifier = Modifier
            .fillMaxWidth()
            .clickable(onClick = onClick)
    ) {
        Column(Modifier.padding(16.dp)) {
            Text(
                text = if (note.title.isBlank()) "(Untitled)" else note.title,
                style = MaterialTheme.typography.titleMedium,
                maxLines = 1,
                overflow = TextOverflow.Ellipsis
            )
            Spacer(Modifier.height(4.dp))
            Text(
                text = note.content.replace("\n", " "),
                style = MaterialTheme.typography.bodyMedium,
                maxLines = 2,
                overflow = TextOverflow.Ellipsis
            )
            Spacer(Modifier.height(8.dp))
            Text(
                text = "Last edited ${TimeUtils.formatRelative(note.updatedAt)}",
                style = MaterialTheme.typography.labelSmall
            )
        }
    }
}

@OptIn(ExperimentalMaterial3Api::class)
@Composable
private fun NoteEditorScreen(
    vm: NotesViewModel,
    noteId: String?,
    isNew: Boolean,
    onDone: () -> Unit,
    onDeleted: () -> Unit
) {
    val context = LocalContext.current

    // Pull the working copy for this editor instance
    val working = remember(noteId) { vm.getWorkingCopy(noteId, isNew) }
    var title by remember(working.id) { mutableStateOf(working.title) }
    var content by remember(working.id) { mutableStateOf(working.content) }
    var showDelete by remember { mutableStateOf(false) }

    BackHandler {
        // Prompt save on back if anything changed; otherwise just go back
        if (title != working.title || content != working.content) {
            vm.upsert(
                working.copy(
                    title = title,
                    content = content,
                    updatedAt = System.currentTimeMillis()
                )
            )
        }
        onDone()
    }

    Scaffold(
        topBar = {
            TopAppBar(
                title = {
                    Text(if (isNew) "New Note" else "Edit Note")
                },
                actions = {
                    TextButton(onClick = {
                        vm.upsert(
                            working.copy(
                                title = title,
                                content = content,
                                updatedAt = System.currentTimeMillis()
                            )
                        )
                        onDone()
                    }) { Text("Save") }

                    IconButton(onClick = { showDelete = true }) {
                        Icon(
                            imageVector = Icons.Default.Delete,
                            contentDescription = "Delete"
                        )
                    }

                    IconButton(onClick = {
                        val send = Intent(Intent.ACTION_SEND).apply {
                            type = "text/plain"
                            putExtra(Intent.EXTRA_SUBJECT, if (title.isBlank()) "Note" else title)
                            putExtra(Intent.EXTRA_TEXT, content)
                        }
                        context.startActivity(
                            Intent.createChooser(send, "Share note")
                        )
                    }) {
                        Icon(
                            imageVector = Icons.Default.Share,
                            contentDescription = "Share"
                        )
                    }
                }
            )
        }
    ) { padding ->
        Column(
            Modifier
                .fillMaxSize()
                .padding(padding)
                .padding(16.dp)
        ) {
            OutlinedTextField(
                value = title,
                onValueChange = { title = it },
                placeholder = { Text("Title") },
                singleLine = true,
                modifier = Modifier.fillMaxWidth()
            )
            Spacer(Modifier.height(12.dp))
            OutlinedTextField(
                value = content,
                onValueChange = { content = it },
                placeholder = { Text("Start typingâ€¦") },
                modifier = Modifier
                    .fillMaxSize()
                    .weight(1f),
                maxLines = Int.MAX_VALUE
            )
        }
    }

    if (showDelete) {
        AlertDialog(
            onDismissRequest = { showDelete = false },
            title = { Text("Delete note?") },
            text = { Text("This action cannot be undone.") },
            confirmButton = {
                TextButton(onClick = {
                    vm.delete(working.id)
                    showDelete = false
                    onDeleted()
                }) { Text("Delete") }
            },
            dismissButton = {
                TextButton(onClick = { showDelete = false }) { Text("Cancel") }
            }
        )
    }
}

// Lightweight vector icons used above (delete/share) without extra deps
// (Material3 supplies these in the base artifact as of recent versions)
private object Icons {
    object Default {
        val Delete = androidx.compose.material.icons.Icons.Default.Delete
        val Share = androidx.compose.material.icons.Icons.Default.Share
    }
}

===== ./Note.kt =====
package com.example.simplepad

import java.util.UUID

data class Note(
    val id: String = newId(),
    val title: String,
    val content: String,
    val createdAt: Long,
    val updatedAt: Long
) {
    companion object {
        fun newId(): String = UUID.randomUUID().toString()
    }
}

===== ./NotesViewModel.kt =====
package com.example.simplepad

import android.app.Application
import android.os.Handler
import android.os.Looper
import androidx.compose.runtime.mutableStateListOf
import androidx.compose.runtime.mutableStateOf
import androidx.lifecycle.AndroidViewModel
import java.util.concurrent.ExecutorService
import java.util.concurrent.Executors

class NotesViewModel(app: Application) : AndroidViewModel(app) {

    private val repo = FileNotesRepository(app)
    private val io: ExecutorService = Executors.newSingleThreadExecutor()
    private val mainHandler = Handler(Looper.getMainLooper())

    // Compose state exposed to UI
    private val _notes = mutableStateListOf<Note>()
    val notesState get() = mutableStateOf(_notes) // wrapper to trigger recomposition when ref changes
    private val _query = mutableStateOf("")
    val queryState get() = _query

    init {
        refresh()
    }

    fun setQuery(q: String) {
        _query.value = q
    }

    fun refresh() {
        io.execute {
            val items = repo.listNotes()
            mainHandler.post {
                _notes.clear()
                _notes.addAll(items)
            }
        }
    }

    fun newDraftId(): String = Note.newId()

    fun getWorkingCopy(noteId: String?, isNew: Boolean): Note {
        if (isNew) {
            // A draft that isn't persisted yet
            return Note(
                id = noteId ?: Note.newId(),
                title = "",
                content = "",
                createdAt = System.currentTimeMillis(),
                updatedAt = System.currentTimeMillis()
            )
        }
        // For existing notes: try memory first, then disk
        val existing = _notes.find { it.id == noteId }
        if (existing != null) return existing
        return repo.readNote(noteId!!)?.also { loaded ->
            // keep memory in sync
            val idx = _notes.indexOfFirst { it.id == loaded.id }
            if (idx >= 0) _notes[idx] = loaded else _notes.add(0, loaded)
        } ?: Note(
            id = noteId ?: Note.newId(),
            title = "",
            content = "",
            createdAt = System.currentTimeMillis(),
            updatedAt = System.currentTimeMillis()
        )
    }

    fun upsert(note: Note) {
        io.execute {
            repo.saveNote(note)
            val updated = repo.readNote(note.id) ?: note
            mainHandler.post {
                val idx = _notes.indexOfFirst { it.id == updated.id }
                if (idx >= 0) {
                    _notes[idx] = updated
                } else {
                    _notes.add(0, updated)
                }
                // keep list sorted by updatedAt desc
                _notes.sortByDescending { it.updatedAt }
            }
        }
    }

    fun delete(id: String) {
        io.execute {
            repo.deleteNote(id)
            mainHandler.post {
                val idx = _notes.indexOfFirst { it.id == id }
                if (idx >= 0) _notes.removeAt(idx)
            }
        }
    }

    override fun onCleared() {
        super.onCleared()
        io.shutdown()
    }
}

===== ./TimeUtils.kt =====
package com.example.simplepad

import java.text.SimpleDateFormat
import java.util.Date
import java.util.Locale
import java.util.concurrent.TimeUnit

object TimeUtils {

    fun formatRelative(timestamp: Long): String {
        val now = System.currentTimeMillis()
        val diff = now - timestamp
        return when {
            diff < TimeUnit.MINUTES.toMillis(1) -> "just now"
            diff < TimeUnit.HOURS.toMillis(1) -> {
                val m = TimeUnit.MILLISECONDS.toMinutes(diff)
                "$m min ago"
            }
            diff < TimeUnit.DAYS.toMillis(1) -> {
                val h = TimeUnit.MILLISECONDS.toHours(diff)
                "$h hr ago"
            }
            else -> {
                val fmt = SimpleDateFormat("MMM d, yyyy h:mm a", Locale.getDefault())
                fmt.format(Date(timestamp))
            }
        }
    }
}

===== ./ui/theme/Color.kt =====
package com.example.simplepad.ui.theme

import androidx.compose.ui.graphics.Color

val Purple80 = Color(0xFFD0BCFF)
val PurpleGrey80 = Color(0xFFCCC2DC)
val Pink80 = Color(0xFFEFB8C8)

val Purple40 = Color(0xFF6650a4)
val PurpleGrey40 = Color(0xFF625b71)
val Pink40 = Color(0xFF7D5260)
===== ./ui/theme/Theme.kt =====
package com.example.simplepad.ui.theme

import android.app.Activity
import android.os.Build
import androidx.compose.foundation.isSystemInDarkTheme
import androidx.compose.material3.MaterialTheme
import androidx.compose.material3.darkColorScheme
import androidx.compose.material3.dynamicDarkColorScheme
import androidx.compose.material3.dynamicLightColorScheme
import androidx.compose.material3.lightColorScheme
import androidx.compose.runtime.Composable
import androidx.compose.ui.platform.LocalContext

private val DarkColorScheme = darkColorScheme(
    primary = Purple80,
    secondary = PurpleGrey80,
    tertiary = Pink80
)

private val LightColorScheme = lightColorScheme(
    primary = Purple40,
    secondary = PurpleGrey40,
    tertiary = Pink40

    /* Other default colors to override
    background = Color(0xFFFFFBFE),
    surface = Color(0xFFFFFBFE),
    onPrimary = Color.White,
    onSecondary = Color.White,
    onTertiary = Color.White,
    onBackground = Color(0xFF1C1B1F),
    onSurface = Color(0xFF1C1B1F),
    */
)

@Composable
fun SimplepadTheme(
    darkTheme: Boolean = isSystemInDarkTheme(),
    // Dynamic color is available on Android 12+
    dynamicColor: Boolean = true,
    content: @Composable () -> Unit
) {
    val colorScheme = when {
        dynamicColor && Build.VERSION.SDK_INT >= Build.VERSION_CODES.S -> {
            val context = LocalContext.current
            if (darkTheme) dynamicDarkColorScheme(context) else dynamicLightColorScheme(context)
        }

        darkTheme -> DarkColorScheme
        else -> LightColorScheme
    }

    MaterialTheme(
        colorScheme = colorScheme,
        typography = Typography,
        content = content
    )
}
===== ./ui/theme/Type.kt =====
package com.example.simplepad.ui.theme

import androidx.compose.material3.Typography
import androidx.compose.ui.text.TextStyle
import androidx.compose.ui.text.font.FontFamily
import androidx.compose.ui.text.font.FontWeight
import androidx.compose.ui.unit.sp

// Set of Material typography styles to start with
val Typography = Typography(
    bodyLarge = TextStyle(
        fontFamily = FontFamily.Default,
        fontWeight = FontWeight.Normal,
        fontSize = 16.sp,
        lineHeight = 24.sp,
        letterSpacing = 0.5.sp
    )
    /* Other default text styles to override
    titleLarge = TextStyle(
        fontFamily = FontFamily.Default,
        fontWeight = FontWeight.Normal,
        fontSize = 22.sp,
        lineHeight = 28.sp,
        letterSpacing = 0.sp
    ),
    labelSmall = TextStyle(
        fontFamily = FontFamily.Default,
        fontWeight = FontWeight.Medium,
        fontSize = 11.sp,
        lineHeight = 16.sp,
        letterSpacing = 0.5.sp
    )
    */
)
